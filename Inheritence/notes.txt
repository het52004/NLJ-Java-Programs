// inheritence

1. private members of a class are inherited to its child class but cannot be accessed directly. We can create get and set public methods in order to access them.

2. private members can be accessed by inner classes.

3. In Java, static members (both variables and methods) are not inherited in the same way instance members  are. However, they are accessible to derived classes.


class Parent {
    static int x = 10;
}

class Child extends Parent {
}

public class Main {
    public static void main(String[] args) {
        System.out.println(Child.x); // Accesses Parent's static variable
    }
}

////

class Parent {
    static void display() {
        System.out.println("Static method in Parent");
    }
}

class Child extends Parent {
    static void display() { // Method hiding
        System.out.println("Static method in Child");
    }
}

public class Main {
    public static void main(String[] args) {
        Parent.display(); // Calls Parent's static method
        Child.display();  // Calls Child's static method
    }
}


4. When you create an object of class B, which extends class A, the constructor of A is always called to initialize the fields and behaviors inherited from A. However, no separate object of A is created explicitlyâ€”it's just the A portion within the B object that gets initialized.

class A {
    A() {
        System.out.println("Constructor of A is called");
    }
}

class B extends A {
    B() {
        System.out.println("Constructor of B is called");
    }
}

public class Main {
    public static void main(String[] args) {
        B obj1 = new B(); // Creates a single object of B, but A's constructor is called
        B obj2 = new B(); // Another object of B, A's constructor is called again
    }
}
